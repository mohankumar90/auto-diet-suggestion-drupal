<?php

/**
 * @file
 * Install, update and uninstall functions for the {{ module_name }} module.
 */

{% if hook_schema == 1 %}
/**
 * Implements hook_schema().
 */
function {{ module_name }}_schema() {
  $schema = array();
{% if help == 1 %}
  // Create your tables with phpmyadmin.
  // Use the schema module to generate the Drupal Schema.
  // See the @link http://drupal.org/project/schema.
  // Note that Drupal 8 is alike Drupal 7.
  // So you can even use D7 drupal schema module.
  {% endif %}
  $schema['{{ module_name }}_example'] = array(
    'description' => 'Example lets how to use hook_schema',
    'fields' => array(
      'field_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'The id of {{ module_name }}_example.',
      ),
      'field_name' => array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 40,
        'description' => 'The field_name of the {{ module_name }}_example.',
      ),
    ),
    'primary key' => array('field_id'),
  );

  return $schema;
}

{% endif %}
{% if hook_install == 1 %}
/**
 * Implements {{ module_name }}_install().
 */
function {{ module_name }}_install() {
{% if help == 1 %}
  // hook_install is used to perform any operation against
  // the database during the installation process.
  // Exemple here : populates the {{ module_name }}_example table.
  db_insert('{{ module_name }}_example')
    ->fields(array(
      'field_id' => 0,
      'field_name' => 'example 1',
    ))
    ->execute();

  // Set default values for config which requires dynamic values.
  // Here : get dynamically the default mail as default variable for the module.
  \Drupal::configFactory()->getEditable('{{ module_name }}.settings')
    ->set('default_from_address', \Drupal::config('system.site')->get('mail'))
    ->save(); 
{% endif %}

  module_set_weight('{{ module_name }}', {{ weight_module }});
}
{% endif %}
{% if hook_uninstall == 1 %}
/**
 * Implements {{ module_name }}_uninstall().
 */
function {{ module_name }}_uninstall() {
{% if help == 1 %}
  // hook_uninstall is used to perform any operation against
  // the database during the uninstallation process.
  // The table declared in hook_schema are automatically handled.
  
  // Clear variables. TODO : automatically clear all variables 
  // (if needed : variable are expected to be automatically removed).
  \Drupal::state()->delete('{{ module_name }}.default_from_address');
  
{% endif %}
}

{% endif %}
{% if hook_update_N == 1 %}
/**
 *  This description will be shown when updating.
 */
function {{ module_name }}_update_8001() {
{% if help == 1 %}
  // hook_update_N has 8 as main number (Drupal core version)
  // and minor update version (database, not module version).
  // First one will be {{ module_name }}_update_8001, then {{ module_name }}_update_8002...
  // Drupal will update all versions from the last database version stored through /update.php.
  
  // To test it for real, install de module and rename into *_update_8002 and run update.php.

  // PAY ATTENTION : think about updating hook_schema if you do any structural modifications here.
  
  // Add a new field using db_add_field method.
  db_add_field('{{ module_name }}_example', 'new_field', array(
        'type' => 'varchar',
        'not null' => TRUE,
        'length' => 40,
        'description' => 'My new string column.',
        'default' => ''
    )
  );
  // Drop field_name field if exists.
  db_drop_field('{{ module_name }}_example', 'field_name');
{% endif %}
}
{% endif %}

{% if hook_requirements == 1 %}
/**
 * Implements hook_requirements().
 */
function {{ module_name }}_requirements($phase) {
{% if help == 1 %}
  // Hook_requirements allows you to show error, warning or status confirmation message
  // during install, update or runtime (i.e. drupal status page).
{% endif %}
  $requirements = array();
  switch ($phase) {
    // Check requirements before installation.
    case 'install':
      // Test PHP version
      $requirements ['test'] = array(
        'title' => t('PHP'),
        'value' => ($phase == 'runtime') ? \Drupal::l(phpversion(), new Url('system.php')) : phpversion(),
      );
      if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) < 0) {
        $requirements ['test']['description'] = t('Your PHP installation is too old. Drupal requires at least PHP %version.', array('%version' => DRUPAL_MINIMUM_PHP));
        $requirements ['test']['severity'] = REQUIREMENT_ERROR;
      }
      break;
{% if help == 1 %}
    // Check requirements before update is also available
    // though not often used.
{% endif %}
    case 'update':
    
      break;
    // Status report page.
    case 'runtime':
{% if help == 1 %}
      // Test all types of requierements.
      // Of course, testing is needed before sending the array.
      // You can provide a 'value' and / or a 'description'. 
{% endif %} 
      $requirements['test_ok'] = array(
        'title' => t('Super !'),
        'value' => t('2.1'),
        'description' => t('Requirement is ok ! Great !'),
        'severity' => REQUIREMENT_OK,
      );
      $requirements['test_warning'] = array(
        'title' => t('Hum hum...'),
        'description' => t('Well, you could do better, dont\'t your think ?'),
        'severity' => REQUIREMENT_WARNING,
      );
      $requirements['test_error'] = array(
        'title' => t('Oh my God !'),
        'value' => t('Not enabled'),
        'description' => t('There is an issue : you should take care of this.'),
        'severity' => REQUIREMENT_ERROR,
      );    
      break;    
  }
  return $requirements;
}
{% endif %}