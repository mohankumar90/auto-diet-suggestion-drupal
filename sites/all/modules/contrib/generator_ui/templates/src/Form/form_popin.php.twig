<?php

/**
* @file
* Contains \Drupal\{{ module_name }}\Form\{{ form }}.
*/

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AppendCommand;
use Drupal\Core\Ajax\CloseModalDialogCommand;
use Drupal\Core\Ajax\CssCommand;
use Drupal\Core\Ajax\HtmlCommand;

class  {{ form }}  extends FormBase {
  /*
  *
  * @return string
  *   The unique string identifying the form.
  */
  public function getFormId() {
    return 'popin_form_generator';
  }

  /**
   * Form constructor.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   The form structure.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form['text'] = array(
      '#type' => 'number',
      '#title' => $this->t('Number'),
      '#required' => TRUE,
    );
    $form['actions'] = array(
      '#type' => 'actions',
    );
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
      '#ajax' => array(
        'callback' => '::validate_number',
        'effect' => 'fade'
      ),
    );
    $form['actions']['css_command_example'] = array(
      '#value' => $this->t("Set the '#box' div to be blue."),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => '::css_command_example_callback',
        'effect' => 'fade'
      ),
      '#suffix' => '<div id="css_div" style="height: 50px; width: 50px; border: 1px solid black"> box</div>',
    );
    $form['message'] = array(
      '#type' => 'hidden',
      '#suffix' => '<div id="message_div"> .</div>',
    );
    return $form;
  }

  /**
   * Form submission handler.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
  }

  public function  css_command_example_callback(array &$form, FormStateInterface $form_state) {
{% if help %}
    // The selector is the id the div
{% endif %}
    $selector = '#css_div';
{% if help %}
    // if the submit is valid, the color of the box will change to blue.
{% endif %}
    $color = 'blue';
{% if help %}
    // Instatiation of a class responsable for reading ajax.
{% endif %}
    $response = new AjaxResponse();
{% if help %}
    // the status message is the the error, warning and all messages.
{% endif %}
    $status_messages = array('#type' => 'status_messages');
{% if help %}
    // if the form is valid.
{% endif %}
    if (!$form_state->getErrors()) {
{% if help %}
      // Display the message via htmlCommand.
{% endif %}
      $response->addCommand(new HtmlCommand('#message_div', '.'));
{% if help %}
      // Change the background color to blue if the form is valid.
{% endif %}
      $response->addCommand(new CssCommand($selector, array('background-color' => $color)));
      return $response;
    }
{% if help %}
    // If the form has errors.
{% endif %}
    else {
{% if help %}
      // reset the color to the white
{% endif %}
      $color = 'white';
      $response->addCommand(new CssCommand($selector, array('background-color' => $color)));
{% if help %}
      // Render the warning message in the modal.
{% endif %}
      $response->addCommand(new HtmlCommand('#message_div', \Drupal::service('renderer')
        ->renderRoot($status_messages)));
      return $response;
    }
  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   * @return AjaxResponse
   */
  public function validate_number(array &$form, FormStateInterface $form_state) {
    $response = new AjaxResponse();
    $status_messages = array('#type' => 'status_messages');
    if (!$form_state->getErrors()) {
      $response->addCommand(new HtmlCommand('#message_div', '.'));
      $selector = '#my-super-id';
      $response->addCommand(new AppendCommand($selector, $form_state->getValue('text')));
      $response->addCommand(new CloseModalDialogCommand());
      return $response;
    }
    else {
      $response->addCommand(new HtmlCommand('#message_div', \Drupal::service('renderer')
        ->renderRoot($status_messages)));
      return $response;
    }
  }
}