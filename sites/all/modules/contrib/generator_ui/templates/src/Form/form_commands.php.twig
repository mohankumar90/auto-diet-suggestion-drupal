<?php

/**
* @file
* Contains \Drupal\{{ module_name }}\Form\{{ form }}.
*/

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\AjaxResponse;
{% if select == 'after' %}
use Drupal\Core\Ajax\AfterCommand;
{% endif %}
{% if select == 'alert' %}
use Drupal\Core\Ajax\AlertCommand;
{% endif %}
{% if select == 'append' %}
use Drupal\Core\Ajax\AppendCommand;
{% endif %}
{% if select == 'before' %}
use Drupal\Core\Ajax\BeforeCommand;
{% endif %}
{% if select == 'changed' %}
use Drupal\Core\Ajax\ChangedCommand;
{% endif %}

class  {{ form }}  extends FormBase {
   /**
   * {@inheritdoc}.
   */
  public function getFormId() {
    return 'ajax_forms_ajax_commands_form';
  }

  /**
   * {@inheritdoc}.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form = array();
{% if select == 'after' %}
    // Shows the 'after' command with a callback generating commands.
    $form['after_command_example'] = array(
      '#value' => $this->t("AJAX 'After': Click to put something after the div"),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => ':: ajax_forms_test_advanced_commands_after_callback',
      ),
      '#suffix' => '<div id="after_div">Something can be inserted after this</div>',
    );
  /**
   * Ajax form callback: Selects 'after'.
   */
  function ajax_forms_test_advanced_commands_after_callback($form, FormStateInterface $form_state) {
    $selector = '#after_div';
    $response = new AjaxResponse();
    $response->addCommand(new AfterCommand($selector, "This will be placed after"));
    return $response;
  }
{% elseif  select == 'alert'%}
    // Shows the 'alert' command.
    $form['alert_command_example'] = array(
      '#value' => $this->t("AJAX 'Alert': Click to alert"),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => '::ajax_forms_test_advanced_commands_alert_callback',
      ),
    );
/**
 * Ajax form callback: Selects 'alert'.
 */
function ajax_forms_test_advanced_commands_alert_callback($form, FormStateInterface $form_state) {
  $response = new AjaxResponse();
  $response->addCommand(new AlertCommand('Alert'));
  return $response;
}
{% elseif  select == 'append'%}
    // Shows the 'append' command.
    $form['append_command_example'] = array(
      '#value' => $this->t("AJAX 'Append': Click to append something"),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => '::ajax_forms_test_advanced_commands_append_callback',
      ),
      '#suffix' => '<div id="append_div">Append inside this div</div>',
    );
/**
 * Ajax form callback: Selects 'append'.
 */
function ajax_forms_test_advanced_commands_append_callback($form, FormStateInterface $form_state) {
  $selector = '#append_div';
  $response = new AjaxResponse();
  $response->addCommand(new AppendCommand($selector, "Appended text"));
  return $response;
}
{% elseif  select == 'before'%}
    // Shows the 'before' command.
    $form['before_command_example'] = array(
      '#value' => $this->t("AJAX 'before': Click to put something before the div"),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => '::ajax_forms_test_advanced_commands_before_callback',
      ),
      '#suffix' => '<div id="before_div">Insert something before this.</div>',
    );
/**
 * Ajax form callback: Selects 'before'.
 */
function ajax_forms_test_advanced_commands_before_callback($form, FormStateInterface $form_state) {
  $selector = '#before_div';
  $response = new AjaxResponse();
  $response->addCommand(new BeforeCommand($selector, "Before text"));
  return $response;
}
{% elseif  select == 'after'%}
    // Shows the 'changed' command adding the asterisk.
    $form['changed_command_asterisk_example'] = array(
      '#value' => $this->t("AJAX changed: Click to mark div changed with asterisk."),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => 'ajax_forms_test_advanced_commands_changed_asterisk_callback',
      ),
    );
{% elseif  select == 'css'%}
    // Shows the Ajax 'css' command.
    $form['css_command_example'] = array(
      '#value' => $this->t("Set the '#box' div to be blue."),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => 'ajax_forms_test_advanced_commands_css_callback',
      ),
      '#suffix' => '<div id="css_div" style="height: 50px; width: 50px; border: 1px solid black"> box</div>',
    );
{% elseif  select == 'after'%}
    // Shows the Ajax 'html' command.
    $form['html_command_example'] = array(
      '#value' => $this->t("AJAX html: Replace the HTML in a selector."),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => 'ajax_forms_test_advanced_commands_html_callback',
      ),
      '#suffix' => '<div id="html_div">Original contents</div>',
    );
{% elseif  select == 'insert'%}
    // Shows the Ajax 'insert' command.
    $form['insert_command_example'] = array(
      '#value' => $this->t("AJAX insert: Let client insert based on #ajax['method']."),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => 'ajax_forms_test_advanced_commands_insert_callback',
        'method' => 'prepend',
      ),
      '#suffix' => '<div id="insert_div">Original contents</div>',
    );
{% elseif  select == 'remove'%}
    // Shows the Ajax 'remove' command.
    $form['remove_command_example'] = array(
      '#value' => $this->t("AJAX 'remove': Click to remove text"),
      '#type' => 'submit',
      '#ajax' => array(
        'callback' => 'ajax_forms_test_advanced_commands_remove_callback',
      ),
      '#suffix' => '<div id="remove_div"><div id="remove_text">text to be removed</div></div>',
    );
{% endif %}
    return $form;
  }

  /**
   * {@inheritdoc}.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
  }

}