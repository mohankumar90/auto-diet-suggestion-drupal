<?php

/**
* @file
* Contains \Drupal\{{ module_name }}\Form\{{ form }}.
*/

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormBuilderInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Symfony\Component\DependencyInjection\ContainerInterface;
{% for container in containers if containers and containers|length>0 %}
use {{ container['class'].getName }};
{% endfor %}

class  {{ form }}  extends FormBase {

{% for container in containers if containers and containers|length>0 %}

  /**
   * {{ container['class'].getName }} definition.
   *
   * @var {{ container['class'].getName }}
   */
    protected ${{ container['name'] }};
{% endfor %}

{% if containers and containers|length>0 %}
  /**
   * {@inheritdoc}
   */
  public function __construct({% for container in containers if containers and containers|length>0 %}{{ container['class'].getShortName }} ${{ container['name'] }}{% if loop.index< containers|length %}, {% endif %}{% endfor %}) {

    {% for container in containers if containers and containers|length>0 %}
        $this->{{ container['name'] }} = ${{ container['name'] }};
{% endfor %}
}
{% endif %}

{% if containers and containers|length>0 %}
    public static function create(ContainerInterface $container) {
    return new static(
    {% for container in containers if containers and containers|length>0 %}
        $container->get('{{ container['service'] }}'){% if loop.index< containers|length %},{% endif %}

    {% endfor %}
    );
    }
{% endif %}

  /*
  *
  * @return string
  *   The unique string identifying the form.
  */
  public function getFormId() {
    return '{{ form_id_ }}';
  }

  /**
  * Form constructor.
  *
  * @param array $form
  *   An associative array containing the structure of the form.
  * @param \Drupal\Core\Form\FormStateInterface $form_state
  *   The current state of the form.
  *
  * @return array
  *   The form structure.
  */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form['hello'] = array(
      '#type' => 'textfield',
      '#title' => t('Type what you want'),
      '#default_value' => 'Hello World !',
      '#required' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
    return $form;
  }

  /**
{% if help == 1 %}
  * Validates globally the form.
{% endif %}
  * {@inheritdoc}
  */
  public function validateForm(array &$form, FormStateInterface $form_state) {

  }
  /**
{% if help == 1 %}
    * Proceed with submition of the form. For example print a confirmation message.
{% endif %}
   * Form submission handler.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    drupal_set_message(t('@hello submitted', array('@hello' => $form_state->getValue('hello'))));
  }
{% if method_custom_permission and custom_permission and controller %}
  public function {{ method_custom_permission }}(){
    //The current user
    $account = \Drupal::currentUser();
    if ($account->hasPermission('{{ custom_permission }}')) {
      return AccessResult::allowed();
    }else{
      return AccessResult::forbidden();
    }
  }
{% endif %}

}
{{ dump() }}