<?php

/**
 * @file
 * Contains \Drupal\{{ module_name }}\Form\{{ form }}.
 */

namespace Drupal\{{ module_name  }}\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

{% if help %}
  // Config form is a classic form like any other : see form generators for more information.
{% endif %}

class {{ form }} extends ConfigFormBase {

  /*
  **
  * Returns a unique string identifying the form.
  *
  * @return string
  *   The unique string identifying the form.
  */
  public function getFormId() {
    return '{{ form_id_ }}';
  }

  /**
   * Form constructor.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   The form structure.
   */

  public function buildForm(array $form, FormStateInterface $form_state) {
{% if help %}
    // This is how you call a $config object to get all the settings of your module calling module_name.settings.
{% endif %}
    $config = $this->config('{{ module_name }}.settings');

{% if help %}
    // For simple key / value setting, use just $config->get('key').
{% endif %}
    $form['email'] = array(
      '#type' => 'email',
      '#title' => $this->t('Email'),
      '#default_value' => $config->get('email')
    );
{% if help %}
    // For nested key / value settings, add a "." between the keys just $config->get('first_key.second_key').
    // $config->get('first_key') will return you an array.
{% endif %}
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => $this->t('Name'),
      '#default_value' => $config->get('contact.name')

    );
    $form['surname'] = array(
      '#type' => 'textfield',
      '#title' => $this->t('Surname'),
      '#default_value' => $config->get('contact.surname')

    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
    );
    return $form;
  }

{% if validation == 1 %}
  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {

  }
{% endif %}

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // Set & save the configuration : get the $config object.
    $config = $this->config('{{ module_name }}.settings');
   // Set simple value key / value.
    $config->set('email', $form_state->getValue('email'));
    // Set an array of parameters equivalent to array('contact => array('name', 'surname')).
    $config->set('contact.name', $form_state->getValue('name'));
    $config->set('contact.surname', $form_state->getValue('surname'));
{% if help %}
    // Just use the ->save() method to save your settings.
{% endif %}
    $config->save();
  }

  /**
   * Gets the configuration names that will be editable.
   *
   * @return array
   *   An array of configuration object names that are editable if called in
   *   conjunction with the trait's config() method.
   */
  protected function getEditableConfigNames() {
    return ['{{ module_name }}.settings'];
  }

}