<?php

/**
 * @file
 * Contains \Drupal\{{ module_name }}\Form\{{ form }}.
 */

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormBuilderInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
{% for container in containers if containers and containers|length>0 %}
use {{ container['class'].getName }};
{% endfor %}

class {{ form }} extends FormBase {

{% for container in containers if containers and containers|length>0 %}

  /**
   * {{ container['class'].getName }} definition.
   *
   * @var {{ container['class'].getName }}
   */
    protected ${{ container['name'] }};
{% endfor %}

{% if containers and containers|length>0 %}
  /**
   * {@inheritdoc}
   */
  public function __construct({% for container in containers if containers and containers|length>0 %}{{ container['class'].getShortName }} ${{ container['name'] }}{% if loop.index< containers|length %}, {% endif %}{% endfor %}) {

    {% for container in containers if containers and containers|length>0 %}
        $this->{{ container['name'] }} = ${{ container['name'] }};
{% endfor %}
}
{% endif %}

{% if containers and containers|length>0 %}
    public static function create(ContainerInterface $container) {
    return new static(
    {% for container in containers if containers and containers|length>0 %}
    $container->get('{{ container['service'] }}'){% if loop.index< containers|length %},{% endif %}

    {% endfor %}
    );
    }
{% endif %}

  /*
  **
  * Returns a unique string identifying the form.
  *
  * @return string
  *   The unique string identifying the form.
  */
  public function getFormId() {
    return '{{ form_id_ }}';
  }

  /**
   * Form constructor.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   The form structure.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form['intro'] = array(
      '#markup' => t('Use this form to send a message to an e-mail address!'),
    );
    $form['number'] = array(
      '#type' => 'textfield',
      '#title' => t('Number'),
{% if validate_number == 1 %}
      '#element_validate' => array(array(get_class($this), 'validate_number')),
{% endif %}
      '#required' => TRUE,
    );
{% if validate_states == 1 %}
    $form['example_checkbox'] = array(
      '#type' => 'checkbox',
      '#title' => $this->t('Show / hidde the fieldset'),
      '#default_value' => '0',
      '#description' => $this->t('Check to show/hidden the fieldset.'),
    );
    $form['example_fieldset'] = array(
      '#type' => 'fieldset',
      '#title' => $this->t('Example fieldset'),
      '#collapsible' => TRUE,
      '#states' => array(
        'visible' => array(
          ':input[name="example_checkbox"]' => array('checked' => TRUE),
        ),
      ),
    );
    $form['example_fieldset']['example_textfield'] = array(
      '#type' => 'textfield',
      '#title' => t('Example Textfield'),
    );
{% endif %}
    $form['email'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail address'),
      '#required' => TRUE,
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    return $form;
  }
{% if validation_form %}
  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
{% if help %}
    // Get the email value.
{% endif %}
    $email = $form_state->getValue('email');
{% if help %}
    // Get all values of the form.
{% endif %}
    $values = $form_state->getValues();
{% if help %}
  // test if devel module exist,if 1 exist
{% endif %}
    $devel_exist = \Drupal::moduleHandler()->moduleExists('devel');
    if ($devel_exist) {
      dpm(t('Show all submitted values on validation'));
      dpm($values);
{% if help %}
      // Get all errors of the form.
{% endif %}
      dpm(t('Show all errors.'));
      dpm($form_state->getErrors());
{% if help %}
     // Get all buttons in the current form.
{% endif %}
      dpm(t('Show element that have triggered the event.'));
      dpm($form_state->getTriggeringElement());
    }
{% if help %}
    // Set error if email is not valid.
{% endif %}
    if (!valid_email_address($email)) {
      $form_state->setErrorByName('email', t('That e-mail address is not valid.'));
    }
    return $form;
  }
{% endif %}
{% if validate_number %}
  // Validate the field number.
  public  function validate_number($element, FormStateInterface $form_state) {
    // Get number's value.
    $number = $element['#value'];
    $form_state->setValueForElement($element, $number);
    // If the field is not a number , an error will go out.
    if (!is_numeric($number)) {
      $form_state->setError($element, t('This field " %number " is not numeric.', array('%number' => $number)));
    }
  }
{% endif %}

  /**
   * Form submission handler.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
{% if rebuild_form %}
{% if help %}
    // Sets the form to be rebuilt after processing.
{% endif %}
    $form_state->setRebuild(true);
{% endif %}
{% if help %}
    // Show all submitted values for debug.
    $devel_exist = \Drupal::moduleHandler()->moduleExists('devel');
    if ($devel_exist == 1) {
      dpm(t('Show all submitted values on submission'));
      dpm($form_state->getValues());
    }
    // Display a message when submitting.
    drupal_set_message(t('Your message could have been sent to @email', array('@email' => $form_state->getValue('email'))));
{% endif %}
  }
}
