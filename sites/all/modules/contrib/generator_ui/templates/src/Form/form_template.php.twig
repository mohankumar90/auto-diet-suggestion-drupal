<?php

/**
 * @file
 * Contains \Drupal\generator_ui\Form\{{ form }}.
 */

namespace Drupal\generator_ui\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormBuilderInterface;
use Drupal\Core\Form\FormStateInterface;

class  {{ form }} extends Generator {

  /*
  **
  * Returns a unique string identifying the form.
  *
  * @return string
  *   The unique string identifying the form.
  */
  public function getFormId() {
    return '{{ form_id_ }}';
  }

  /**
   * Form constructor.
   *
{% if help %}
   * This form declares all form elements specific for your generator.
{% endif %}
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   The form structure.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
{% if help %}
    // Declare here all twig file names that should be called (twig files are placed into /templates/).
    // You do not need to provide the path, but the file itself MUST be in the right folter under /templates.
    // For example, to create a controller, you should put it into templates/src/Controller folder of generator_ui.
    // Moreover, you should put the right extention (for example .yml.twig) for a yml file (or .php.yml).
    // This will allow the module to generate later the file in the right directory.
    // You can add an understandable label as a key to the array.
{% endif %}
    $form['twig_file'] = array(
      "#type" => 'hidden',
      "#value" => array('test'=> '{{ twig_name }}.html.twig.twig'),
    );
{% if help %}
    // The machine name of each field will be sent as a variable to all twig files.
{% endif %}
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => 'Name',
    );
    $form['number'] = array(
      '#type' => 'textfield',
      '#title' => 'Number',
    );
{% if help %}
    // Will call the parent method, responsible for submit button, AJAX, module name form field and help checkbox.
{% endif %}
    $form = parent::buildForm($form, $form_state);
{% if help %}
    // After parent method is executed, you can modify it (remove a button for example).
{% endif %}
    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
{% if help %}
    // Example for a special validation of the form for this template.
    $number = $form_state->getValue('number');
    if(!is_numeric($number)){
      $form_state->setErrorByName('number', $this->t('The %number is not numeric.', array('%number' => $form_state->getValue('number'))));
    }

    // This will do global validation for the form
{% endif %}
    return parent::validateForm($form, $form_state);
  }

  /**
   * Form submission handler.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
{% if help %}
    // Will call the parent method for generating code via AJAX, creating or exporting files, printing confirmation messages...
    // You can print extra messages or for other uses.
{% endif %}
    return parent::submitForm($form, $form_state);
  }

}
