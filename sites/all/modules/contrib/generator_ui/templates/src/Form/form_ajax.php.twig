<?php

/**
 * @file
 * Contains \Drupal\{{ module_name }}\Form\{{ form }}.
 */

namespace Drupal\{{ module_name }}\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;

class {{ form }} extends FormBase {
  /*
  **
  * Returns a unique string identifying the form.
  *
  * @return string
  *   The unique string identifying the form.
  */
  public function getFormId() {
    return '{{ form_id_ }}';
  }

  /**
   * Form constructor.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   The form structure.
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
{% if demo_field_ajax %}
    $form['example_1'] = array(
      '#markup' => t('<h3><strong>' . 'Example of dynamic form evolution' . '</strong></h3>'),
    );
    $choice = array('checkbox' => 'Checkbox', 'radios' => 'Radio Button');
{% if help %}
    // This is the form element that will trigger the AJAX so it has the '#ajax' property.
    // It needs a wrapper class i.e. a CSS / HTML class that will be changed. This portion will
    // be replaced when triggering the AJAX.
    // Moreover, we need a callback. See the callback method for more information.
{% endif %}
    $form['choice'] = array(
      '#type' => 'select',
      '#title' => t('Choose the type :'),
      '#options' => $choice,
      '#ajax' => array(
        'callback' => '::choice_callback',
        'wrapper' => 'ajax-choice',
      ),
    );
{% if help %}
    // Since the form is entirely rebuilt and the form state is sent, we will proceed as follow :
    // 1 - With $form_state object we can know what the user has done.
    // 2 - We can therefore entirely change the form according to the user choices.
    // 3 - Anyway we need to include the portion of the form into the right div with the right class.
{% endif %}
    $choice = $form_state->getValue('choice');
    if($choice == 'radios'){
      $options = array(t('Hi Drupal 7'),t('Hi Drupal 8'));
      $form['active'] = array(
        '#title' => t('Hi radio button !'),
        '#type' => 'radios',
        '#options' => $options,
        '#prefix' => '<div id="ajax-choice">',
        '#suffix' => '</div>',
      );
    }
    else {
      $form['active'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hi checkbox !'),
        '#prefix' => '<div id="ajax-choice">',
        '#suffix' => '</div>',
      );
    }
{% endif %}
{% if submission_demo_ajax %}
    $form['example_2'] = array(
      '#markup' => t('<h3><strong>' . 'Example of AJAX Button :' . '</strong></h3>'),
    );
{% if help %}
    // We first define a field that we will use later on.
{% endif %}
    $form['text_example'] = array(
      '#type' => 'textfield',
      "#title" => t("Write something !"),
      "#default_value" => t("Hi ajax in Drupal 8 !"),
    );

{% if help %}
    // We the define a button that will trigger the AJAX with a callback to do the stuff.
    // We need to define the wrapper into which we will push changes by replacing.
{% endif %}
    $form['btn_example'] = array(
      '#type' => 'button',
      '#executes_submit_callback' => TRUE,
      '#button_type' => 'submit',
      '#value' => t('Generate textfield\'s content '),
      '#ajax' => array(
        'callback' => '::generate_example',
        'wrapper' => 'ajax-generate',
      ),
    );
{% if help %}
    // As always we need a wrapper to push our changes. We create here a form element, but it could be just a markup.
{% endif %}
    $form['ajx_example'] = array(
      '#type' => 'textarea',
      '#resizable' => TRUE,
      '#rows' => 15,
      '#attributes' => array('onclick' => 'this.select()'),
      '#cols' => 10,
      '#weight' => 100,
      '#prefix' => '<div id="ajax-generate">',
      '#suffix' => '</div>',
    );
{% endif %}
{% if submit_demo %}
{% if help %}
    // We define here the submit. By default it will launch the submitForm method, but we could define our
    // own submit callback defining '#submit' property.
{% endif %}
    $form['btn_submit'] = array(
      '#type' => 'submit',
      '#value' => $this->t('Submit'),
{% if help %}
      // We can define a special callback. If not, the type is submit so the normal submition process will occur.
      // We use 'ajax-form' wrapper which is the form general css class (the form_id being ajax_form).
{% endif %}
      '#ajax' => array(
        'wrapper' => 'ajax-form',
      ),
    );
{% endif %}
    return $form;
  }
{% if validation_form %}
  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
{% if help %}
    // Validation is launched anyway. See the simple form generator to see how to get which button has been clicked
    // and do different validation process depending on which button has been clicked.
    // BEWARE : with the button example, since we do not reload the field in error, he cannot highlibht errors.
    // With the submition, we reload the whole form, we get the right highlighting.
{% endif %}
    if ($form_state->getValue('choice') != 'radios') {
      $form_state->setErrorByName('choice', t('Please choose radio to validate the form.'));
    }

  }
{% endif %}

  /**
   * Form submission handler.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
{% if help %}
    // Submition is launched by all submit or buttons that have note the '#submit' property.
    // You my specify it or check which button has been clicked to do different submit.
{% endif %}
    drupal_set_message('Great : you submitted the form ! Choose "checkbox" to test ajax validation');
  }

{% if demo_field_ajax %}
  /**
   * return the right choice( Button or textfield).
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   return the right choice.
   */
  public function choice_callback(array $form, FormStateInterface $form_state) {
{% if help %}
    // The simplest possible return : we just return the form element that will be changed.
    // The form being entirely rebuilt in the build method, every work is done there.
    // You have indeed the choice to do the logic here or in the build method (see demo behind).
    // Here we change the description of the field. The rest is done in the build method.
{% endif %}
    if ($form_state->getValue('choice') == 'checkbox') {
      $form['active']['#description'] = t('Checkbox chosen');
    }
    else {
      $form['active']['#description'] = t('Radio chosen');
    }
    return $form['active'];
  }
{% endif %}

{% if submission_demo_ajax %}
  /**
   * Return ajax content from textfield to textarea.
   *
   * @param array $form
   *   An associative array containing the structure of the form.
   * @param \Drupal\Core\Form\FormStateInterface $form_state
   *   The current state of the form.
   *
   * @return array
   *   Return ajax content.
   */
  public function generate_example(array $form, FormStateInterface $form_state) {
{% if help %}
    // Another possible return : you can change the form from here.
    // Depending on the $form_state object, you can change the form itself.
    // Beware to send back the right portion. For example, if you return $form, you'll see the whole form
    // appear in the wrapper div you have defined !
{% endif %}
    $input = $form_state->getValue('text_example');
    $form['ajx_example']['#value'] = $input;
    return $form['ajx_example'];
  }
{% endif %}
}
