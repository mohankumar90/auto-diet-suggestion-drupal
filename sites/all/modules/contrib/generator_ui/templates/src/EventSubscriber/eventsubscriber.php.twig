<?php

/**
 * @file
 * Contains \Drupal\{{ module_name }}\EventSubscriber.
 */

namespace Drupal\{{ module_name }}\EventSubscriber;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\EventDispatcher\Event;
{% for container in containers if containers and containers|length>0 %}
use {{ container['class'].getName }};
{% endfor %}

class {{ class_name }} implements EventSubscriberInterface {

{% for container in containers if containers and containers|length>0 %}
    /**
    * {{ container['class'].getName }} definition.
    *
    * @var {{ container['class'].getName }}
    */
    protected ${{ container['name'] }};

{% endfor %}
    /**
    * Constructor.
    */
    public function __construct({% for container in containers if containers and containers|length>0 %}{{ container['class'].getShortName }} ${{ container['name'] }}{% if loop.index< containers|length %}, {% endif %}{% endfor %}) {
    {% for container in containers if containers and containers|length>0 %}
    $this->{{ container['name'] }} = ${{ container['name'] }};
    {% endfor %}
}

    /**
    * {@inheritdoc}
    */
    static function getSubscribedEvents() {
        $events['{{ events_name }}'] = ['{{ function }}'];
        return $events;
    }

    /**
    * This method is called whenever the {{ events_name }} event is
    * dispatched.
    *
    * @param Event $event
    */
    public function {{ function }}(Event $event) {
        drupal_set_message('Event {{ events_name }} thrown by Subscriber in module {{ module_name }}.', 'status', TRUE);
    }
}