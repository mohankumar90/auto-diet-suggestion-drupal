<?php

/**
 * @file
 * Contains \Drupal\{{ module_name }}\Plugin\Action\{{ action_class }}.
 */

namespace Drupal\{{ module_name }}\Plugin\Action;


use Drupal\Core\Annotation\Action;
use Drupal\Core\Session\AccountInterface;
{% if type_action ==  "node" or type_action ==  "comment" %}
use Drupal\Core\Action\ActionBase;
{% elseif type_action ==  "user" %}
use Drupal\user\Plugin\Action\ChangeUserRoleBase;
{% endif %}


/**
 * Publishes a node.
 *
 * @Action(
 *   id = "{{ id_action }}",
 *   label = @Translation("{{ label_action }}"),
 *   type = "{{ type_action }}"
 * )
 */
{% if type_action ==  "node" or type_action ==  "comment" %}
class {{ action_class }} extends ActionBase {
{% elseif type_action ==  "user" %}
class {{ action_class }} extends ChangeUserRoleBase {
{% endif %}
  /**
   * {@inheritdoc}
   */
{% if type_action ==  "node" %}
  public function execute($entity = NULL) {
{% if options_action_node == "publishContent"  %}
    $entity->status = 1;
{% if help %}
   // Unpublish content ( status = 0 )
{% endif %}
{% else %}
    $entity->status = 0;
{% if help %}
   // Unpublish content ( status = 0 )
{% endif %}

{% endif %}
    $entity->save();
  }
{% elseif type_action ==  "user" %}
  public function execute($account = NULL) {
    $rid = $this->configuration['rid'];
    // Skip adding the role to the user if they already have it.
    if ($account !== FALSE && !$account->hasRole($rid)) {
      // For efficiency manually save the original account before applying
      // any changes.
      $account->original = clone $account;
{% if options_action_user == "addRole"  %}
      $account->addRole($rid);
{% else %}
      $account->removeRole($rid);
{% endif %}
      $account->save();
    }
  }
{% elseif type_action ==  "comment" %}
  public function execute($comment = NULL) {
{% if options_action_comment == "publishContent" %}
    $comment->setPublished(TRUE);
{% else %}
    $comment->setPublished(FALSE);
{% endif %}
    $comment->save();
  }
{% endif %}
{% if type_action ==  "node" or type_action ==  "comment" %}
/**
   * {@inheritdoc}
   */
  public function access($object, AccountInterface $account = NULL, $return_as_object = FALSE) {
    /** @var \Drupal\node\NodeInterface $object */
    $result = $object->access('update', $account, TRUE)
      ->andIf($object->status->access('edit', $account, TRUE));
    return $return_as_object ? $result : $result->isAllowed();
  }
{% endif %}
}
