<?php
/**
 * @file
 * Contains \Drupal\{{ module_name }}\Plugin\Block\{{ class_block }}.
 */

namespace Drupal\{{ module_name }}\Plugin\Block;

use Drupal\Core\Block\BlockBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Plugin\ContextAwarePluginAssignmentTrait;
use Drupal\Core\Plugin\ContextAwarePluginBase;
use Drupal\Component\Utility\Unicode;
use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Component\Transliteration\TransliterationInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;
{% for container in containers if containers and containers|length>0 %}
use {{ container['class'].getName }};
{% endfor %}
{% if help %}
// Comments behind declares the id, label and category of the block.
// The label is also the title by default but can be overridden through the admin page of the block.
// Use @translation to be able to translate strings.
// Use category to group blocks together on the block admin interface (name of the module by default).
{% endif %}
/**
 *
 * @Block(
 *   id = "{{ id_block }}",
{% if admin_label and not derivative %}
 *   admin_label = @Translation("{{ admin_label }}"),
{% endif %}
{% if category and not derivative %}
 *   category = @Translation("{{ category }}")
{% endif %}
{% if derivative and category %}
 *   category = @Translation("{{ category }}"),
 *   deriver = "\Drupal\{{ module_name }}\Plugin\Derivative\{{ class_derivative }}"
{% endif %}
 * )
 */
class {{ class_block }} extends BlockBase {

{% for container in containers if containers and containers|length>0 %}

  /**
   * {{ container['class'].getName }} definition.
   *
   * @var {{ container['class'].getName }}
   */
    protected ${{ container['name'] }};
{% endfor %}

{% if containers and containers|length>0 %}
  /**
   * {@inheritdoc}
   */
  public function __construct(array $configuration, $plugin_id, $plugin_definition, {% for container in containers if containers and containers|length>0 %}{{ container['class'].getShortName }} ${{ container['name'] }}{% if loop.index< containers|length %}, {% endif %}{% endfor %}) {
            parent::__construct($configuration, $plugin_id, $plugin_definition);
    {% for container in containers if containers and containers|length>0 %}
        $this->{{ container['name'] }} = ${{ container['name'] }};
    {% endfor %}
}
{% endif %}

{% if containers and containers|length>0 %}
    public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    return new static(
            $configuration,
            $plugin_id,
            $plugin_definition,
    {% for container in containers if containers and containers|length>0 %}
        $container->get('{{ container['service'] }}'){% if loop.index< containers|length %},{% endif %}

    {% endfor %}
    );
    }
{% endif %}

{% if config_block  %}

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   * @return array
   */
  public function blockForm($form, FormStateInterface $form_state) {
    $form = parent::blockForm($form, $form_state);
    $config = $this->getConfiguration();
    $form['block_settings'] = array(
      '#type' => 'textfield',
      '#title' => $this->t('Name'),
      '#description' => $this->t('Who do you want to say hello to?'),
      '#default_value' => isset($config['block_settings']) ? $config['block_settings'] : '',
    );
    return $form;
  }

  /**
   * @param array $form
   * @param FormStateInterface $form_state
   */
  public function blockSubmit($form, FormStateInterface $form_state) {
    $this->setConfigurationValue('block_settings', $form_state->getValue('block_settings'));
  }

  /**
   * @return array
   */
  public function build() {
    // Reload the configuration
    $config = $this->getConfiguration();
    if (isset($config['block_settings']) && !empty($config['block_settings'])) {
      $name = $config['block_settings'];
    }
    else {
      $name = $this->t('to no one');
    }
    return array(
      '#markup' => $this->t('Hello @name', array('@name' => $name))
    );
  }
{% else %}
  /**
   * {@inheritdoc}
   */
  public function build() {
{% if help %}
    // Returns the block content. You can use a theme function with parameters. You can use #markup for a simple HTML return.
{% endif %}
    return array('#markup' => '<span>' . t('{{ text }}') . '</span>');
  }
{% endif %}

{% if control_access %}

 /**  /**
   * Indicates whether the block should be shown.
   *
   * Blocks with specific access checking should override this method rather
   * than access(), in order to avoid repeating the handling of the
   * $return_as_object argument.
   *
   * @param \Drupal\Core\Session\AccountInterface $account
   *   The user session for which to check access.
   *
   * @return \Drupal\Core\Access\AccessResult
   *   The access result.
   *
   * @see self::access()
   */
  protected function blockAccess(AccountInterface $account) {
    if ($account->hasPermission('access content')) {
      return AccessResult::allowed();
    }
    else {
      return AccessResult::forbidden();
    }
  }
{% endif %}
}