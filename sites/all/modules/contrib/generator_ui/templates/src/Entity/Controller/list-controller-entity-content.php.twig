<?php

/**
* @file
* Contains Drupal\{{module_name}}\Entity\Controller\{{ entity_class }}ListController.
*/

namespace Drupal\{{module_name}}\Entity\Controller;

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityListBuilder;
use Drupal\Core\Url;


/**
 * Provides a list controller for {{ entity_class }} entity.
 *
 * @ingroup {{ module_name }}
 */
class {{ entity_class }}ListController extends EntityListBuilder
{

  /**
   * {@inheritdoc}
   *
   * We override ::render() so that we can add our own content above the table.
   * parent::render() is where EntityListBuilder creates the table using our
   * buildHeader() and buildRow() implementations.
   */
  public function render() {
    $build['description'] = array(
      '#markup' => $this->t('Content Entity Example implements a {{ entity_class }} model. These contacts are fieldable entities. You can manage the fields on the <a href="@adminlink">{{ entity_class }} admin page</a>.', array(
        '@adminlink' => \Drupal::urlGenerator()->generateFromRoute('{{ entity_name }}.settings'),
      )),
    );
    $build['table'] = parent::render();
    return $build;
  }

  /**
   * {@inheritdoc}
   */
  public function buildHeader() {
    $header['id'] = t('{{ entity_class }}ID');
    $header['name'] = t('Name');
    $header['first_name'] = $this->t('First Name');
    $header['gender'] = $this->t('Gender');
    return $header + parent::buildHeader();
  }

  /**
   * {@inheritdoc}
   */
  public function buildRow(EntityInterface $entity) {
    $row['id'] = $entity->id();
    $row['name'] = $entity->link();
    $row['first_name'] = $entity->first_name->value;
    $row['gender'] = $entity->gender->value;
    return $row + parent::buildRow($entity);
  }
}
