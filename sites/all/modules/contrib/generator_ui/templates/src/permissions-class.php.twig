<?php
/**
 * @file
 * Contains \Drupal\{{ module_name }}\{{ dynamic_permission }}.
 */

namespace Drupal\{{ module_name }};

use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Drupal\Core\StringTranslation\StringTranslationTrait;
use Drupal\Core\Entity\EntityManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Provides dynamic permissions for the {{ module_name }} module.
 */
class {{ dynamic_permission }} implements ContainerInjectionInterface {

  use StringTranslationTrait;

  /**
   * The entity manager.
   *
   * @var \Drupal\Core\Entity\EntityManagerInterface
   */
  protected $entityManager;
{% if help %}
// Inject entity manager service in the current class.
{% endif %}
  /**
   * Instantiates a new instance of this class.
   *
   * This is a factory method that returns a new instance of this class. The
   * factory should pass any needed dependencies into the constructor of this
   * class, but not the container itself. Every call to this method must return
   * a new instance of this class; that is, it may not implement a singleton.
   *
   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
   *   The service container this instance should use.
   */
  public static function create(ContainerInterface $container) {
    return new static($container->get('entity.manager'));
  }
{% if help %}
  // We add the entity manager when we instanciate the current class.
{% endif %}
  /**
   * Constructs a new {{ dynamic_permission }} instance.
   *
   * @param \Drupal\Core\Entity\EntityManagerInterface $entity_manager
   *   The entity manager.
   */
  public function __construct(EntityManagerInterface $entity_manager) {
    $this->entityManager = $entity_manager;
  }

  public function customPermissions() {
    $permissions = [];
    foreach ($this->entityManager->getDefinitions() as $entity_type_id => $entity_type) {
{% if help %}
// If the entity is a content entity, then we add a permission.
{% endif %}
      if ($entity_type->getBaseTable() != NULL) {

        $permissions['administer  ' . $entity_type_id . ' test'] = [
          'title' => $this->t('%entity_label: Administer permissions test', ['%entity_label' => $entity_type->getLabel()]),
        ];
      }
    }
    return $permissions;
  }
}